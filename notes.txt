acer-phones-59 Acer100
alcatel-phones-5 alcatel409
allview-phones-88 Allview157
amazon-phones-76 Amazon25
amoi-phones-28 Amoi47
apple-phones-48 Apple118
archos-phones-90 Archos43
asus-phones-46 Asus202
at&t-phones-57 AT&T4
benefon-phones-15 Benefon9
benq-phones-31 BenQ35
benq_siemens-phones-42 BenQ-Siemens28
bird-phones-34 Bird61
blackberry-phones-36 BlackBerry92
blackview-phones-116 Blackview89
blu-phones-67 BLU369
bosch-phones-10 Bosch10
bq-phones-108 BQ20
casio-phones-77 Casio5
cat-phones-89 Cat22
celkon-phones-75 Celkon229
chea-phones-24 Chea12
coolpad-phones-105 Coolpad46
cubot-phones-130 Cubot57
dell-phones-61 Dell20
doogee-phones-129 Doogee66
emporia-phones-93 Emporia15
energizer-phones-106 Energizer68
ericsson-phones-2 Ericsson40
eten-phones-40 Eten22
fairphone-phones-127 Fairphone4
fujitsu_siemens-phones-50 Fujitsu Siemens2
garmin_asus-phones-65 Garmin-Asus5
gigabyte-phones-47 Gigabyte63
gionee-phones-92 Gionee95
google-phones-107 Google27
haier-phones-33 Haier59
honor-phones-121 Honor206
hp-phones-41 HP41
htc-phones-45 HTC287
huawei-phones-58 Huawei440
i_mate-phones-35 i-mate34
i_mobile-phones-52 i-mobile37
icemobile-phones-69 Icemobile61
infinix-phones-119 Infinix123
innostream-phones-29 Innostream18
inq-phones-60 iNQ5
intex-phones-102 Intex15
itel-phones-131 itel30
jolla-phones-84 Jolla3
karbonn-phones-83 Karbonn60
kyocera-phones-17 Kyocera24
lava-phones-94 Lava144
leeco-phones-109 LeEco9
lenovo-phones-73 Lenovo246
lg-phones-20 LG667
maxon-phones-14 Maxon31
maxwest-phones-87 Maxwest41
meizu-phones-74 Meizu72
micromax-phones-66 Micromax289
microsoft-phones-64 Microsoft32
mitac-phones-25 Mitac12
mitsubishi-phones-8 Mitsubishi25
modu-phones-63 Modu8
motorola-phones-4 Motorola606
mwg-phones-56 MWg5
nec-phones-12 NEC73
neonode-phones-22 Neonode3
niu-phones-79 NIU30
nokia-phones-1 Nokia576
nothing-phones-128 Nothing3
nvidia-phones-97 Nvidia3
o2-phones-30 O245
oneplus-phones-95 OnePlus65
oppo-phones-82 Oppo295
orange-phones-71 Orange19
oukitel-phones-132 Oukitel32
palm-phones-27 Palm17
panasonic-phones-6 Panasonic123
pantech-phones-32 Pantech72
parla-phones-81 Parla10
philips-phones-11 Philips229
plum-phones-72 Plum113
posh-phones-101 Posh30
prestigio-phones-86 Prestigio56
qmobile-phones-103 QMobile90
qtek-phones-38 Qtek21
razer-phones-117 Razer2
realme-phones-118 Realme182
sagem-phones-13 Sagem120
samsung-phones-9 Samsung1382
sendo-phones-18 Sendo19
sewon-phones-26 Sewon25
sharp-phones-23 Sharp72
siemens-phones-3 Siemens94
sonim-phones-54 Sonim18
sony-phones-7 Sony158
sony_ericsson-phones-19 Sony Ericsson188
spice-phones-68 Spice120
t_mobile-phones-55 T-Mobile64
tcl-phones-123 TCL61
tecno-phones-120 Tecno132
tel_me_-phones-21 Tel.Me.7
telit-phones-16 Telit30
thuraya-phones-49 Thuraya1
toshiba-phones-44 Toshiba35
ulefone-phones-124 Ulefone85
unnecto-phones-91 Unnecto30
vertu-phones-39 Vertu17
verykool-phones-70 verykool139
vivo-phones-98 vivo410
vk_mobile-phones-37 VK Mobile31
vodafone-phones-53 Vodafone87
wiko-phones-96 Wiko99
wnd-phones-51 WND5
xcute-phones-43 XCute4
xiaomi-phones-80 Xiaomi376
xolo-phones-85 XOLO81
yezz-phones-78 Yezz113
yota-phones-99 Yota3
yu-phones-100 YU13
zte-phones-62 ZTE369

from django.db.models import Q

# Assuming you have the price range defined as min_price and max_price
min_price = 500  # Replace with your desired minimum price
max_price = 1000  # Replace with your desired maximum price

# Get devices within the specified price range with descending popularity
devices_in_price_range = Specifications.objects.filter(
    Q(pricing__gte=min_price) & Q(pricing__lte=max_price)
).order_by('-popularity')

# Now, you can iterate over the queryset to access the devices
for specification in devices_in_price_range:
    print(specification.device.name, specification.pricing, specification.popularity)

acer_chromebook_tab_10-9139
https://fdn2.gsmarena.com/vv/bigpic/acer-chromebook-tab-10.jpg
[
    {'name': 'Display size', 'value': '9.7"'}, 
    {'name': 'Display resolution', 'value': '1536x2048 pixels'},
    {'name': 'Camera pixels', 'value': '5'},
    {'name': 'Video pixels', 'value': '720p'},
    {'name': 'RAM size', 'value': '4'},
    {'name': 'Chipset', 'value': 'Rockchip RK3399'},
    {'name': 'Battery size', 'value': '4500'},
    {'name': 'Battery type', 'value': 'Li-Po'}
]
[] 0.1


# Import the required Modules 
import requests 
  
# Create a pool of proxies 
proxies = { 
    'http://114.121.248.251:8080', 
    'http://222.85.190.32:8090', 
    'http://47.107.128.69:888', 
    'http://41.65.146.38:8080', 
    'http://190.63.184.11:8080', 
    'http://45.7.135.34:999', 
    'http://141.94.104.25:8080', 
    'http://222.74.202.229:8080', 
    'http://141.94.106.43:8080', 
    'http://191.101.39.96:80'
} 
  
url = 'https://ipecho.net/plain'
  
# Iterate the proxies and check if it is working. 
for proxy in proxies: 
    try: 
  
        # https://ipecho.net/plain returns the ip address 
        # of the current session if a GET request is sent. 
        page = requests.get( 
          url, proxies={"http": proxy, "https": proxy}) 
  
        # Prints Proxy server IP address if proxy is alive. 
        print("Status OK, Output:", page.text) 
  
    except OSError as e: 
  
        # Proxy returns Connection error 
        print(e) 
